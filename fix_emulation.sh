#!/bin/bash

# Script pour diagnostiquer et corriger le probl√®me d'√©mulation
set -e

echo "üîß Diagnostic et correction du probl√®me d'√©mulation..."
echo "=================================================="

# V√©rifier les cores actuels
echo ""
echo "üì± Analyse des cores actuels..."
for arch in x86_64 arm64-v8a; do
    core_path="FCEUmmWrapper/app/src/main/jniLibs/$arch/libfceumm.so"
    if [ -f "$core_path" ]; then
        echo "‚úÖ $arch: $(ls -lh "$core_path" | awk '{print $5}')"
        
        # V√©rifier les symboles libretro
        echo "   Symboles libretro:"
        nm -D "$core_path" 2>/dev/null | grep -E "(retro_init|retro_load_game|retro_run)" | head -5 || echo "   ‚ùå Impossible de lire les symboles"
    else
        echo "‚ùå $arch: Core manquant"
    fi
done

# V√©rifier les cores officiels
echo ""
echo "üì• V√©rification des cores officiels..."
if [ -f "official_cores/x86_64/fceumm_libretro_android.so" ]; then
    echo "‚úÖ Core officiel x86_64 disponible"
    echo "   Taille: $(ls -lh official_cores/x86_64/fceumm_libretro_android.so | awk '{print $5}')"
    
    # Comparer les symboles
    echo "   Symboles officiels:"
    nm -D official_cores/x86_64/fceumm_libretro_android.so 2>/dev/null | grep -E "(retro_init|retro_load_game|retro_run)" | head -5 || echo "   ‚ùå Impossible de lire les symboles"
else
    echo "‚ùå Core officiel x86_64 manquant"
fi

# Cr√©er un script de test de compatibilit√©
echo ""
echo "üß™ Cr√©ation d'un test de compatibilit√©..."

cat > test_core_compatibility.c << 'EOF'
#include <stdio.h>
#include <dlfcn.h>
#include <signal.h>

void signal_handler(int sig) {
    printf("SIGSEGV captur√© - Core incompatible\n");
    exit(1);
}

int main() {
    signal(SIGSEGV, signal_handler);
    
    void *handle = dlopen("./test_core.so", RTLD_LAZY);
    if (!handle) {
        printf("‚ùå Impossible de charger le core: %s\n", dlerror());
        return 1;
    }
    
    printf("‚úÖ Core charg√© avec succ√®s\n");
    
    // Test des fonctions critiques
    void (*retro_init)(void) = dlsym(handle, "retro_init");
    if (!retro_init) {
        printf("‚ùå retro_init non trouv√©\n");
        return 1;
    }
    
    printf("‚úÖ retro_init trouv√©\n");
    
    // Test d'initialisation
    retro_init();
    printf("‚úÖ retro_init ex√©cut√© sans crash\n");
    
    dlclose(handle);
    printf("‚úÖ Test termin√© avec succ√®s\n");
    return 0;
}
EOF

# Compiler le test
gcc -o test_core_compatibility test_core_compatibility.c -ldl

echo "‚úÖ Test de compatibilit√© cr√©√©"

# Cr√©er un script de correction automatique
echo ""
echo "üîß Cr√©ation d'un script de correction..."

cat > fix_core_issue.sh << 'EOF'
#!/bin/bash

# Script de correction du probl√®me de core
set -e

echo "üîß Correction du probl√®me de core..."

# Option 1: Utiliser un core plus stable
echo "üì• T√©l√©chargement d'un core plus stable..."
wget -O stable_core.zip "https://buildbot.libretro.com/nightly/android/latest/x86_64/fceumm_libretro_android.so.zip"
unzip -o stable_core.zip -d stable_cores/

# Option 2: Compiler un core personnalis√© avec des flags de s√©curit√©
echo "üî® Compilation d'un core s√©curis√©..."
mkdir -p secure_build
cd secure_build

# Cloner FCEUmm si n√©cessaire
if [ ! -d "fceumm" ]; then
    git clone https://github.com/libretro/libretro-fceumm.git fceumm
fi

cd fceumm

# Compiler avec des flags de s√©curit√©
make -f Makefile.libretro platform=android \
    CFLAGS="-O2 -fPIC -DANDROID -D__ANDROID__ -DHAVE_NEON=0 -DHAVE_SSE=0" \
    LDFLAGS="-shared -Wl,--no-undefined -Wl,--version-script=link.T"

# Copier le core s√©curis√©
cp fceumm_libretro_android.so ../../secure_core.so

echo "‚úÖ Core s√©curis√© compil√©"

# Option 3: Modifier le wrapper pour g√©rer les SIGSEGV
echo "üîß Modification du wrapper pour g√©rer les SIGSEGV..."

cat > wrapper_patch.c << 'PATCH_EOF'
// Patch pour g√©rer les SIGSEGV dans le wrapper
#include <signal.h>
#include <setjmp.h>

static jmp_buf sigsegv_env;

void sigsegv_handler(int sig) {
    longjmp(sigsegv_env, 1);
}

// Fonction s√©curis√©e pour charger une ROM
int safe_load_rom(const char* rom_path) {
    signal(SIGSEGV, sigsegv_handler);
    
    if (setjmp(sigsegv_env) == 0) {
        // Tentative de chargement s√©curis√©e
        return retro_load_game_func(&game_info);
    } else {
        // SIGSEGV captur√© - utiliser un fallback
        printf("SIGSEGV captur√©, utilisation du mode fallback\n");
        return 0;
    }
}
PATCH_EOF'

echo "‚úÖ Patch de s√©curit√© cr√©√©"
EOF

chmod +x fix_core_issue.sh

echo ""
echo "üéØ Solutions propos√©es :"
echo "1. Tester la compatibilit√© des cores"
echo "2. Utiliser un core plus stable"
echo "3. Compiler un core personnalis√© s√©curis√©"
echo "4. Modifier le wrapper pour g√©rer les SIGSEGV"

echo ""
echo "Pour corriger le probl√®me, ex√©cutez :"
echo "  ./fix_core_issue.sh" 