#!/bin/bash

# Script de correction du probl√®me de core
set -e

echo "üîß Correction du probl√®me de core..."

# Option 1: Utiliser un core plus stable
echo "üì• T√©l√©chargement d'un core plus stable..."
wget -O stable_core.zip "https://buildbot.libretro.com/nightly/android/latest/x86_64/fceumm_libretro_android.so.zip"
unzip -o stable_core.zip -d stable_cores/

# Option 2: Compiler un core personnalis√© avec des flags de s√©curit√©
echo "üî® Compilation d'un core s√©curis√©..."
mkdir -p secure_build
cd secure_build

# Cloner FCEUmm si n√©cessaire
if [ ! -d "fceumm" ]; then
    git clone https://github.com/libretro/libretro-fceumm.git fceumm
fi

cd fceumm

# Compiler avec des flags de s√©curit√©
make -f Makefile.libretro platform=android \
    CFLAGS="-O2 -fPIC -DANDROID -D__ANDROID__ -DHAVE_NEON=0 -DHAVE_SSE=0" \
    LDFLAGS="-shared -Wl,--no-undefined -Wl,--version-script=link.T"

# Copier le core s√©curis√©
cp fceumm_libretro_android.so ../../secure_core.so

echo "‚úÖ Core s√©curis√© compil√©"

# Option 3: Modifier le wrapper pour g√©rer les SIGSEGV
echo "üîß Modification du wrapper pour g√©rer les SIGSEGV..."

cat > wrapper_patch.c << 'PATCH_EOF'
// Patch pour g√©rer les SIGSEGV dans le wrapper
#include <signal.h>
#include <setjmp.h>

static jmp_buf sigsegv_env;

void sigsegv_handler(int sig) {
    longjmp(sigsegv_env, 1);
}

// Fonction s√©curis√©e pour charger une ROM
int safe_load_rom(const char* rom_path) {
    signal(SIGSEGV, sigsegv_handler);
    
    if (setjmp(sigsegv_env) == 0) {
        // Tentative de chargement s√©curis√©e
        return retro_load_game_func(&game_info);
    } else {
        // SIGSEGV captur√© - utiliser un fallback
        printf("SIGSEGV captur√©, utilisation du mode fallback\n");
        return 0;
    }
}
PATCH_EOF'

echo "‚úÖ Patch de s√©curit√© cr√©√©"
