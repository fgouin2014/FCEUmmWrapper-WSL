# Script de test pour le syst√®me d'overlays RetroArch
# Valide l'impl√©mentation et g√©n√®re des rapports

param(
    [string]$ProjectPath = ".",
    [switch]$GenerateImages = $false,
    [switch]$BuildProject = $true,
    [switch]$RunTests = $true
)

Write-Host "=== Test du Syst√®me d'Overlays RetroArch ===" -ForegroundColor Green

# Fonction pour v√©rifier l'existence des fichiers
function Test-FileExists {
    param([string]$FilePath, [string]$Description)
    
    if (Test-Path $FilePath) {
        Write-Host "‚úì $Description : $FilePath" -ForegroundColor Green
        return $true
    } else {
        Write-Host "‚úó $Description : $FilePath (MANQUANT)" -ForegroundColor Red
        return $false
    }
}

# Fonction pour v√©rifier la structure des dossiers
function Test-DirectoryStructure {
    Write-Host "`n--- V√©rification de la Structure des Dossiers ---" -ForegroundColor Cyan
    
    $requiredDirs = @(
        "app/src/main/java/com/fceumm/wrapper/overlay",
        "app/src/main/assets/overlays",
        "app/src/main/res/layout"
    )
    
    $allExist = $true
    foreach ($dir in $requiredDirs) {
        if (Test-Path $dir) {
            Write-Host "‚úì Dossier : $dir" -ForegroundColor Green
        } else {
            Write-Host "‚úó Dossier manquant : $dir" -ForegroundColor Red
            $allExist = $false
        }
    }
    
    return $allExist
}

# Fonction pour v√©rifier les fichiers Java
function Test-JavaFiles {
    Write-Host "`n--- V√©rification des Fichiers Java ---" -ForegroundColor Cyan
    
    $javaFiles = @(
        "app/src/main/java/com/fceumm/wrapper/overlay/RetroArchOverlayManager.java",
        "app/src/main/java/com/fceumm/wrapper/overlay/RetroArchOverlayView.java",
        "app/src/main/java/com/fceumm/wrapper/overlay/RetroArchInputManager.java",
        "app/src/main/java/com/fceumm/wrapper/overlay/OverlayPreferences.java",
        "app/src/main/java/com/fceumm/wrapper/overlay/OverlayConfig.java",
        "app/src/main/java/com/fceumm/wrapper/overlay/OverlayButton.java",
        "app/src/main/java/com/fceumm/wrapper/overlay/OverlayType.java",
        "app/src/main/java/com/fceumm/wrapper/overlay/OverlayHitbox.java"
    )
    
    $allExist = $true
    foreach ($file in $javaFiles) {
        if (Test-FileExists $file "Fichier Java") {
            # V√©rifier la syntaxe basique
            $content = Get-Content $file -Raw
            if ($content -match "package com\.fceumm\.wrapper\.overlay") {
                Write-Host "  ‚úì Package correct" -ForegroundColor Green
            } else {
                Write-Host "  ‚ö† Package incorrect ou manquant" -ForegroundColor Yellow
            }
        } else {
            $allExist = $false
        }
    }
    
    return $allExist
}

# Fonction pour v√©rifier les fichiers de configuration
function Test-ConfigFiles {
    Write-Host "`n--- V√©rification des Fichiers de Configuration ---" -ForegroundColor Cyan
    
    $configFiles = @(
        "app/src/main/assets/overlays/retropad.cfg",
        "app/src/main/assets/overlays/rgpad.cfg",
        "app/src/main/assets/overlays/README.md"
    )
    
    $allExist = $true
    foreach ($file in $configFiles) {
        if (Test-FileExists $file "Fichier de configuration") {
            # V√©rifier le contenu des .cfg
            if ($file -match "\.cfg$") {
                $content = Get-Content $file -Raw
                if ($content -match "overlays = 1") {
                    Write-Host "  ‚úì Format RetroArch d√©tect√©" -ForegroundColor Green
                } else {
                    Write-Host "  ‚ö† Format RetroArch non d√©tect√©" -ForegroundColor Yellow
                }
            }
        } else {
            $allExist = $false
        }
    }
    
    return $allExist
}

# Fonction pour v√©rifier le layout
function Test-LayoutFile {
    Write-Host "`n--- V√©rification du Layout ---" -ForegroundColor Cyan
    
    $layoutFile = "app/src/main/res/layout/activity_emulation.xml"
    
    if (Test-FileExists $layoutFile "Layout XML") {
        $content = Get-Content $layoutFile -Raw
        
        # V√©rifier la pr√©sence de la vue RetroArch
        if ($content -match "RetroArchOverlayView") {
            Write-Host "  ‚úì Vue RetroArchOverlayView trouv√©e" -ForegroundColor Green
        } else {
            Write-Host "  ‚úó Vue RetroArchOverlayView manquante" -ForegroundColor Red
            return $false
        }
        
        # V√©rifier la pr√©sence du fallback
        if ($content -match "SimpleOverlay") {
            Write-Host "  ‚úì Fallback SimpleOverlay trouv√©" -ForegroundColor Green
        } else {
            Write-Host "  ‚ö† Fallback SimpleOverlay manquant" -ForegroundColor Yellow
        }
        
        return $true
    } else {
        return $false
    }
}

# Fonction pour v√©rifier MainActivity
function Test-MainActivity {
    Write-Host "`n--- V√©rification de MainActivity ---" -ForegroundColor Cyan
    
    $mainActivityFile = "app/src/main/java/com/fceumm/wrapper/MainActivity.java"
    
    if (Test-FileExists $mainActivityFile "MainActivity") {
        $content = Get-Content $mainActivityFile -Raw
        
        # V√©rifier les imports
        $imports = @(
            "RetroArchOverlayManager",
            "RetroArchOverlayView", 
            "RetroArchInputManager",
            "OverlayPreferences"
        )
        
        $allImportsFound = $true
        foreach ($import in $imports) {
            if ($content -match $import) {
                Write-Host "  ‚úì Import trouv√© : $import" -ForegroundColor Green
            } else {
                Write-Host "  ‚úó Import manquant : $import" -ForegroundColor Red
                $allImportsFound = $false
            }
        }
        
        # V√©rifier les m√©thodes
        $methods = @(
            "initializeRetroArchOverlays",
            "loadRetroArchOverlays",
            "applyOverlayPreferences"
        )
        
        $allMethodsFound = $true
        foreach ($method in $methods) {
            if ($content -match $method) {
                Write-Host "  ‚úì M√©thode trouv√©e : $method" -ForegroundColor Green
            } else {
                Write-Host "  ‚úó M√©thode manquante : $method" -ForegroundColor Red
                $allMethodsFound = $false
            }
        }
        
        return $allImportsFound -and $allMethodsFound
    } else {
        return $false
    }
}

# Fonction pour g√©n√©rer des images de test
function Generate-TestImages {
    Write-Host "`n--- G√©n√©ration des Images de Test ---" -ForegroundColor Cyan
    
    if ($GenerateImages) {
        Write-Host "Ex√©cution du script de g√©n√©ration d'images..." -ForegroundColor Yellow
        & "./generate_overlay_images.ps1"
    } else {
        Write-Host "G√©n√©ration d'images ignor√©e (utilisez -GenerateImages pour activer)" -ForegroundColor Yellow
    }
}

# Fonction pour compiler le projet
function Build-Project {
    Write-Host "`n--- Compilation du Projet ---" -ForegroundColor Cyan
    
    if ($BuildProject) {
        try {
            Write-Host "Compilation avec Gradle..." -ForegroundColor Yellow
            & "./gradlew" "clean" "assembleDebug"
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úì Compilation r√©ussie" -ForegroundColor Green
                return [bool]$true
            } else {
                Write-Host "‚úó Erreur de compilation" -ForegroundColor Red
                return [bool]$false
            }
        } catch {
            Write-Host "‚úó Erreur lors de la compilation : $_" -ForegroundColor Red
            return [bool]$false
        }
    } else {
        Write-Host "Compilation ignor√©e (utilisez -BuildProject pour activer)" -ForegroundColor Yellow
        return [bool]$true
    }
}

# Fonction pour ex√©cuter les tests
function Run-Tests {
    Write-Host "`n--- Ex√©cution des Tests ---" -ForegroundColor Cyan
    
    if ($RunTests) {
        Write-Host "Tests √† impl√©menter :" -ForegroundColor Yellow
        Write-Host "  - Test de chargement des overlays" -ForegroundColor White
        Write-Host "  - Test de parsing des fichiers .cfg" -ForegroundColor White
        Write-Host "  - Test de rendu OpenGL" -ForegroundColor White
        Write-Host "  - Test de d√©tection tactile" -ForegroundColor White
        Write-Host "  - Test de mapping des inputs" -ForegroundColor White
    } else {
        Write-Host "Tests ignor√©s (utilisez -RunTests pour activer)" -ForegroundColor Yellow
    }
}

# Fonction pour g√©n√©rer le rapport
function Generate-Report {
    param([bool]$StructureOK, [bool]$JavaOK, [bool]$ConfigOK, [bool]$LayoutOK, [bool]$MainActivityOK, [bool]$BuildOK)
    
    Write-Host "`n=== RAPPORT FINAL ===" -ForegroundColor Green
    
    $totalTests = 6
    $passedTests = 0
    
    if ($StructureOK) { $passedTests++ }
    if ($JavaOK) { $passedTests++ }
    if ($ConfigOK) { $passedTests++ }
    if ($LayoutOK) { $passedTests++ }
    if ($MainActivityOK) { $passedTests++ }
    if ($BuildOK) { $passedTests++ }
    
    Write-Host "Tests r√©ussis : $passedTests/$totalTests" -ForegroundColor $(if ($passedTests -eq $totalTests) { "Green" } else { "Yellow" })
    
    if ($passedTests -eq $totalTests) {
        Write-Host "`nüéâ TOUS LES TESTS R√âUSSIS !" -ForegroundColor Green
        Write-Host "Le syst√®me d'overlays RetroArch est pr√™t √† √™tre utilis√©." -ForegroundColor Green
    } else {
        Write-Host "`n‚ö† Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus." -ForegroundColor Yellow
    }
    
    # Recommandations
    Write-Host "`n--- Recommandations ---" -ForegroundColor Cyan
    Write-Host "1. Cr√©ez des images PNG pour les overlays" -ForegroundColor White
    Write-Host "2. Testez sur un appareil r√©el" -ForegroundColor White
    Write-Host "3. Validez les performances" -ForegroundColor White
    Write-Host "4. Testez avec diff√©rents overlays" -ForegroundColor White
}

# Ex√©cution des tests
Write-Host "D√©marrage des tests..." -ForegroundColor Yellow

$structureOK = Test-DirectoryStructure
$javaOK = Test-JavaFiles
$configOK = Test-ConfigFiles
$layoutOK = Test-LayoutFile
$mainActivityOK = Test-MainActivity

Generate-TestImages
$buildOK = Build-Project
Run-Tests

# S'assurer que $buildOK est un bool√©en
if ($buildOK -is [array]) {
    $buildOK = [bool]$buildOK[0]
} elseif ($buildOK -is [string]) {
    $buildOK = [bool]($buildOK -eq "True" -or $buildOK -eq "true" -or $buildOK -eq "1")
} else {
    $buildOK = [bool]$buildOK
}

Generate-Report $structureOK $javaOK $configOK $layoutOK $mainActivityOK $buildOK

Write-Host "`nTest termin√©." -ForegroundColor Green 